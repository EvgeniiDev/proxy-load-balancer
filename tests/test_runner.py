#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Proxy Load Balancer

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m tests.test_runner                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    python -m tests.test_runner --fast             # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    python -m tests.test_runner --category load    # –¢–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    python -m tests.test_runner test_load_balancing # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å
"""

import unittest
import sys
import argparse
import time
from typing import List, Dict, Any


class TestRunner:
    """–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    
    def __init__(self):
        self.test_categories = {
            'load': ['test_load_balancing'],
            'health': ['test_proxy_health'],
            'http': ['test_http_methods'],
            'stats': ['test_stats_monitoring'],
            'config': ['test_configuration'],
            'integration': ['test_integration'],
            'edge': ['test_edge_cases'],
            'memory': ['test_memory_management'],
            'fast': ['test_load_balancing', 'test_proxy_health', 'test_http_methods'],
            'full': ['test_load_balancing', 'test_proxy_health', 'test_http_methods', 
                    'test_stats_monitoring', 'test_configuration', 'test_integration', 
                    'test_edge_cases', 'test_memory_management']
        }
        
        self.test_descriptions = {
            'test_load_balancing': '–¢–µ—Å—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏',
            'test_proxy_health': '–¢–µ—Å—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ 429',
            'test_http_methods': '–¢–µ—Å—Ç—ã HTTP/HTTPS –º–µ—Ç–æ–¥–æ–≤ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
            'test_stats_monitoring': '–¢–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
            'test_configuration': '–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã',
            'test_integration': '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
            'test_edge_cases': '–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤',
            'test_memory_management': '–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é'
        }
    
    def run_tests(self, test_modules: List[str] = None, verbose: bool = False, 
                  stop_on_failure: bool = False) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        
        if test_modules is None:
            test_modules = self.test_categories['full']
        
        results = {
            'total_tests': 0,
            'passed': 0,
            'failed': 0,
            'errors': 0,
            'skipped': 0,
            'modules': {},
            'start_time': time.time(),
            'end_time': None
        }
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {', '.join(test_modules)}")
        print("=" * 80)
        
        for module_name in test_modules:
            print(f"\nüì¶ –ú–æ–¥—É–ª—å: {module_name}")
            print(f"üìù {self.test_descriptions.get(module_name, '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
            print("-" * 60)
            
            module_results = self._run_single_module(module_name, verbose, stop_on_failure)
            results['modules'][module_name] = module_results
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results['total_tests'] += module_results['tests_run']
            results['passed'] += module_results['passed']
            results['failed'] += len(module_results['failures'])
            results['errors'] += len(module_results['errors'])
            results['skipped'] += len(module_results['skipped'])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥—É–ª—è
            self._print_module_results(module_name, module_results)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if stop_on_failure and (module_results['failures'] or module_results['errors']):
                print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –º–æ–¥—É–ª–µ {module_name}")
                break
        
        results['end_time'] = time.time()
        return results
    
    def _run_single_module(self, module_name: str, verbose: bool, stop_on_failure: bool) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module = __import__(f'tests.{module_name}', fromlist=[module_name])
            
            # –°–æ–∑–¥–∞–µ–º test suite
            loader = unittest.TestLoader()
            suite = loader.loadTestsFromModule(module)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            stream = sys.stdout if verbose else None
            runner = unittest.TextTestRunner(
                stream=stream,
                verbosity=2 if verbose else 1,
                failfast=stop_on_failure
            )
            
            result = runner.run(suite)
            
            return {
                'tests_run': result.testsRun,
                'passed': result.testsRun - len(result.failures) - len(result.errors),
                'failures': result.failures,
                'errors': result.errors,
                'skipped': result.skipped if hasattr(result, 'skipped') else []
            }
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
            return {
                'tests_run': 0,
                'passed': 0,
                'failures': [],
                'errors': [('ImportError', str(e))],
                'skipped': []
            }
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ {module_name}: {e}")
            return {
                'tests_run': 0,
                'passed': 0,
                'failures': [],
                'errors': [('UnexpectedError', str(e))],
                'skipped': []
            }
    
    def _print_module_results(self, module_name: str, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥—É–ª—è"""
        tests_run = results['tests_run']
        passed = results['passed']
        failures = len(results['failures'])
        errors = len(results['errors'])
        skipped = len(results['skipped'])
        
        if tests_run == 0:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å")
            return
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        if failures > 0:
            print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failures}")
        if errors > 0:
            print(f"   üí• –û—à–∏–±–∫–∏: {errors}")
        if skipped > 0:
            print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        
        success_rate = (passed / tests_run) * 100 if tests_run > 0 else 0
        status_emoji = "‚úÖ" if success_rate == 100 else "‚ö†Ô∏è" if success_rate >= 80 else "‚ùå"
        print(f"   {status_emoji} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if failures and len(results['failures']) > 0:
            print(f"\nüö® –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
            for test, traceback in results['failures'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {test}")
        
        if errors and len(results['errors']) > 0:
            print(f"\nüí• –û—à–∏–±–∫–∏:")
            for test, traceback in results['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {test}")
    
    def print_final_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        duration = results['end_time'] - results['start_time']
        
        print("\n" + "=" * 80)
        print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
        print("=" * 80)
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['total_tests']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {results['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['failed']}")
        print(f"üí• –û—à–∏–±–∫–∏: {results['errors']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}")
        
        if results['total_tests'] > 0:
            success_rate = (results['passed'] / results['total_tests']) * 100
            print(f"üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if success_rate == 100:
                status = "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!"
                print(f"\n{status}")
            elif success_rate >= 80:
                status = "‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ"
                print(f"\n{status}")
            else:
                status = "‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
                print(f"\n{status}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥—É–ª—è–º
        print(f"\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º:")
        for module_name, module_results in results['modules'].items():
            tests_run = module_results['tests_run']
            passed = module_results['passed']
            if tests_run > 0:
                success_rate = (passed / tests_run) * 100
                status_emoji = "‚úÖ" if success_rate == 100 else "‚ö†Ô∏è" if success_rate >= 80 else "‚ùå"
                print(f"   {status_emoji} {module_name}: {passed}/{tests_run} ({success_rate:.1f}%)")
            else:
                print(f"   ‚ö†Ô∏è {module_name}: –ù–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è")
    
    def list_available_tests(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("üìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–°–¢–´ –ò –ö–ê–¢–ï–ì–û–†–ò–ò")
        print("=" * 80)
        
        print("\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for category, modules in self.test_categories.items():
            print(f"   {category}: {', '.join(modules)}")
        
        print(f"\nüì¶ –ú–æ–¥—É–ª–∏ —Ç–µ—Å—Ç–æ–≤:")
        for module, description in self.test_descriptions.items():
            print(f"   {module}: {description}")
        
        print(f"\nüí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   python -m tests.test_runner --category fast")
        print(f"   python -m tests.test_runner test_load_balancing")
        print(f"   python -m tests.test_runner --verbose test_proxy_health")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Proxy Load Balancer",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s                           # –í—Å–µ —Ç–µ—Å—Ç—ã
  %(prog)s --fast                    # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
  %(prog)s --category load           # –¢–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
  %(prog)s test_load_balancing       # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å
  %(prog)s --list                    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  %(prog)s --verbose test_proxy_health  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        """
    )
    
    parser.add_argument('modules', nargs='*', 
                       help='–ú–æ–¥—É–ª–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--category', '-c', 
                       help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--fast', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--verbose', '-v', action='store_true', 
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--stop-on-failure', '-s', action='store_true', 
                       help='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ')
    parser.add_argument('--list', '-l', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤')
    
    args = parser.parse_args()
    
    runner = TestRunner()
    
    if args.list:
        runner.list_available_tests()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    test_modules = None
    
    if args.fast:
        test_modules = runner.test_categories['fast']
    elif args.category:
        if args.category in runner.test_categories:
            test_modules = runner.test_categories[args.category]
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {args.category}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(runner.test_categories.keys())}")
            sys.exit(1)
    elif args.modules:
        test_modules = args.modules
    else:
        test_modules = runner.test_categories['full']
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        results = runner.run_tests(
            test_modules=test_modules,
            verbose=args.verbose,
            stop_on_failure=args.stop_on_failure
        )
        
        runner.print_final_summary(results)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results['failed'] > 0 or results['errors'] > 0:
            sys.exit(1)
        else:
            sys.exit(0)
            
    except KeyboardInterrupt:
        print(f"\n\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
